// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;

namespace TestFramework.Tooling.UnitTestLauncher.Tests
{
    /// <summary>
    /// This is a program that tests the non-generated code of the
    /// TestFramework.Tooling.UnitTestLauncherGenerator This project
    /// can also be used to code and debug that code.
    ///
    /// The code is included in the TestFramework.Tooling as embedded resource.
    /// It is not tested in the build of TestFramework.Tooling.
    ///
    /// The code below the line depends on the TestFramework.Tooling.Tests.Execution.v3
    /// project. Check and run the test TestFramework_Tooling_UnitTestLauncher_Tests_Asserts
    /// in TestFramework.Tooling.Tests to verify that the data is still correct.
    /// </summary>
    public class Program
    {
        public static void Main()
        {
            Console.WriteLine("========================================");
            Console.WriteLine("UnitTestLauncher test program");
            Console.WriteLine("========================================");

            nanoFramework.TestFramework.Tools.UnitTestLauncher.Run("***");
        }
    }
}

//===========================================================================================
//
// The code below is normally generated by the UnitTestLauncherGenerator.
//
// The code may need to be adapted if the TestFramework.Tooling.Tests.Execution.v3
// project is updated.
//
// Check and run the test TestFramework_Tooling_UnitTestLauncher_Tests_Asserts
// in TestFramework.Tooling.Tests to verify that the data is still correct.
//

namespace nanoFramework.TestFramework.Tools
{
    public partial class UnitTestLauncher
    {
        private partial void RunUnitTests()
        {
            ForClass(
                typeof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor), true,
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Setup),
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Cleanup),
                (frm, fdr) =>
                {
                    frm(nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Test));
                }
            );

            ForClass(
                typeof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInSetup), true,
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Setup),
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Cleanup),
                (frm, fdr) =>
                {
                    frm(nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInSetup.Test));
                }
            );

            ForClass(
                typeof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInTest), true,
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Setup),
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Cleanup),
                (frm, fdr) =>
                {
                    frm(nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInTest.Test));
                }
            );

            ForClass(
                typeof(global::TestFramework.Tooling.Tests.NFUnitTest.InconclusiveInTest), true,
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Setup),
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Cleanup),
                (frm, fdr) =>
                {
                    frm(nameof(global::TestFramework.Tooling.Tests.NFUnitTest.InconclusiveInTest.Test));
                }
            );

            ForClass(
                typeof(global::TestFramework.Tooling.Tests.NFUnitTest.CleanupFailedInTest), true,
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Setup),
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Cleanup),
                (frm, fdr) =>
                {
                    frm(nameof(global::TestFramework.Tooling.Tests.NFUnitTest.CleanupFailedInTest.Test));
                }
            );

            ForClass(
                typeof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInCleanUp), true,
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Setup),
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Cleanup),
                (frm, fdr) =>
                {
                    frm(nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInCleanUp.Test));
                }
            );

            ForClass(
                typeof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInDispose), true,
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Setup),
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Cleanup),
                (frm, fdr) =>
                {
                    frm(nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInDispose.Test));
                }
            );

            ForClass(
                typeof(global::TestFramework.Tooling.Tests.NFUnitTest.NonFailingTest), true,
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Setup),
                nameof(global::TestFramework.Tooling.Tests.NFUnitTest.FailInConstructor.Cleanup),
                (frm, fdr) =>
                {
                    frm(nameof(global::TestFramework.Tooling.Tests.NFUnitTest.NonFailingTest.Test));
                }
            );

            ForClass(
                typeof(global::TestFramework.Tooling.Tests.NFUnitTest.TestWithMethods), true,
                null, null,
                (frm, fdr) =>
                {
                    fdr(nameof(global::TestFramework.Tooling.Tests.NFUnitTest.TestWithMethods.Test1), 0, 1);
                    frm(nameof(global::TestFramework.Tooling.Tests.NFUnitTest.TestWithMethods.Test2));
                }
            );
        }
    }
}
